# 5. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать из этих элементов список с сохранением порядка их следования в исходном списке, например:
# src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# result = [23, 1, 3, 10, 4, 11]
# Подсказка: напишите сначала решение «в лоб». Потом подумайте об оптимизации.
from time import perf_counter
import sys

src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

# Вариант в лоб - больше времени, вес - 120
result = []
start = perf_counter()
for i in src:
    if i in result:
        result.remove(i)
    else:
        result.append(i)
print(result, perf_counter() - start, sys.getsizeof(result))


# Дургой вариант - гораздо маньше времени, вес 16 (без таймера)
def unique_elements():
    """Возвращает уникальные элементы в списке по их порядку"""

    result = []
    start = perf_counter()
    for item in src:
        if src.count(item) == 1:
            # Можно через set но так он займет больше места
            result.append(item)
    print(result)
    print(perf_counter() - start)


print(sys.getsizeof(unique_elements()))

# Александр, если честно, немножко не понял суть задания.
# Два решения выдал, если бы было указанно точно на что оптимизировать - стало бы понятней.
# Гораздо удобнее когда задачу авторы методички ставят точно, а не "ОСТАНОВИСЬ - ПОДУМОЙ"
